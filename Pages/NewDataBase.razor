@page "/NewDataBase"

@using BlazorServerApp.Models
@using BlazorServerApp.Services
@using BlazorServerApp.Enums
@using BlazorServerApp.Extensions
@inject AnimalService AnimalService
@inject UserService UserService
@inject CityService CityService

<MudSelect Label="Таблица" AnchorOrigin="Origin.BottomCenter" ValueChanged="@((TableType type) => GetTable(type))">
    <MudSelectItem Value="@TableType.Animal"> @TableType.Animal.GetDescription() </MudSelectItem>
    <MudSelectItem Value="@TableType.City"> @TableType.City.GetDescription() </MudSelectItem>
    <MudSelectItem Value="@TableType.User"> @TableType.User.GetDescription() </MudSelectItem>
</MudSelect>

<MudTable Items="@Animals" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<Animal,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
        <col style="width:50px;" />
        <col style="width:80px;" />
        <col style="width:50%;" />
        <col />
        <col />
        @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Animal, object>(x=>x.Id)">Идентификатор</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Animal, object>(x=>x.Name)">Наименование</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Animal, object>(x=>x.Age)">Возраст</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Animal, object>(x=>x.Breed)">Порода</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Age">@context.Age</MudTd>
        <MudTd DataLabel="Breed">@context.Breed</MudTd>
    </RowTemplate>
    <RowEditingTemplate>

        <MudTd DataLabel="Breed">
            <MudNumericField @bind-Value="@context.Id" Required Min="1" />
        </MudTd>
        
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="@context.Name" Required />
        </MudTd>
        
        <MudTd DataLabel="Age">
            <MudNumericField @bind-Value="@context.Age" Required Min="1" />
        </MudTd>
        
        <MudTd DataLabel="Breed">
            <MudTextField @bind-Value="@context.Breed" Required />
        </MudTd>
        
        
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>


@code {
    private List<string> editEvents = new();
    private bool dense = true;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private Animal selectedItem1 = null;
    private Animal elementBeforeEdit;
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;

    private List<Animal> Animals = new List<Animal>();
    private List<City> Cities = new List<City>();
    private List<User> Users = new List<User>();


    private TableType _tableType;

    private List<User> _users;

    private List<Animal> _animals;

    private List<City> _cities;
    
    private async Task GetTable(TableType tableType)
    {
        _tableType = tableType;
        switch (_tableType)
        {
            case TableType.Animal:
            {
                Animals = await AnimalService.GetAnimalsAsync();
                break;
            }
            case TableType.City:
            {
                Cities = await CityService.GetCitiesAsync();
                break;
            }
            case TableType.User:
            {
                Users = await UserService.GetUsersAsync();
                break;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Animals = await AnimalService.GetAnimalsAsync();
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {
                Id = ((Animal)element).Id,
                Name = ((Animal)element).Name,
                Age = ((Animal)element).Age,
                Breed = ((Animal)element).Breed
            };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((Animal)element).Name}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Element {((Animal)element).Name} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((Animal)element).Id = elementBeforeEdit.Id;
        ((Animal)element).Name = elementBeforeEdit.Name;
        ((Animal)element).Age = elementBeforeEdit.Age;
        ((Animal)element).Breed = elementBeforeEdit.Breed;
        AddEditionEvent($"RowEditCancel event: Editing of Element {((Animal)element).Name} canceled");
    }

    private bool FilterFunc(Animal element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Breed.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Age} {element.Id}".Contains(searchString))
            return true;
        return false;
    }
    
    
}