@page "/database"
@using BlazorServerApp.Models
@using BlazorServerApp.Services
@using BlazorServerApp.Enums
@using BlazorServerApp.Extensions
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Update
@using System.Data
@inject WeatherForecastService ForecastService
@inject AnimalService AnimalService
@inject UserService UserService
@inject CityService CityService


<PageTitle>DataBase</PageTitle>

<h1>DataBase</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <MudSelect Label="Таблица" AnchorOrigin="Origin.BottomCenter" ValueChanged="@((TableType type) => GetTable(type))">
        <MudSelectItem Value="@TableType.Animal"> @TableType.Animal.GetDescription() </MudSelectItem>
        <MudSelectItem Value="@TableType.City"> @TableType.City.GetDescription() </MudSelectItem>
        <MudSelectItem Value="@TableType.User"> @TableType.User.GetDescription() </MudSelectItem>
    </MudSelect>
}
else
{
    
    <MudSelect Label="Таблица" AnchorOrigin="Origin.BottomCenter" ValueChanged="@((TableType type) => GetTable(type))">
        <MudSelectItem Value="@TableType.Animal"> @TableType.Animal.GetDescription() </MudSelectItem>
        <MudSelectItem Value="@TableType.City"> @TableType.City.GetDescription() </MudSelectItem>
        <MudSelectItem Value="@TableType.User"> @TableType.User.GetDescription() </MudSelectItem>
    </MudSelect>
    
    <br/>
    <br/>

    @if (_tableType == TableType.Animal)
    {
        <MudSimpleTable Dense Bordered Striped Style="overflow-x: auto;">
            <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Age</th>
                <th>Breed</th>
            </tr>
            </thead>
            <tbody>
            @if (_animals != null)
            {
                foreach (var a in _animals)
                {
                    <tr>
                        <td>@a.Id</td>
                        <td>@a.Name</td>
                        <td>@a.Age</td>
                        <td>@a.Breed</td>

                    </tr>
                }
            }
            </tbody>
        </MudSimpleTable>
    }
    else if (_tableType == TableType.City)
    {
        <MudSimpleTable Dense Bordered Striped Style="overflow-x: auto;">
            <thead>
            <tr>
                <th>Id</th>
                <th>NameCity</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var c in _cities)
            {
                <tr>
                    <td>@c.Id</td>
                    <td>@c.NameCity</td>
                </tr>
            }
            </tbody>
        </MudSimpleTable>
    }
    else if (_tableType == TableType.User)
    {
        <MudSimpleTable Dense Bordered Striped Style="overflow-x: auto;">
            <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Age</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var u in _users)
            {
                <tr>
                    <td>@u.Id</td>
                    <td>@u.Name</td>
                    <td>@u.Age</td>
                </tr>
            }
            </tbody>
        </MudSimpleTable>
    }
    
}

@code {
    private WeatherForecast[]? forecasts = Array.Empty<WeatherForecast>();
    private TableType _tableType;
    
    private User[]? _users;

    private Animal[]? _animals;

    private City[]? _cities;
    
    private List<Animal> _displayData;
    
    
    private async Task GetTable(TableType tableType)
    {
        
        _tableType = tableType;
        using (ApplicationContext db = new ApplicationContext())
        {
            switch (_tableType)
            {
            
                case TableType.Animal:
                {
                    _animals = await AnimalService.GetAnimalsAsync(db);
                    break;
                }
                case TableType.City:
                {
                    _cities = await CityService.GetCitiesAsync(db);
                    break;
                }
                case TableType.User:
                {
                    _users = await UserService.GetUsersAsync(db);
                    break;
                }    
            }
        }
    }
}